#!/usr/bin/env python3

import sys
import json
import logging

from typing import List, Dict, Tuple, Any

def create_topic(tag: str, index: int=1, prefix: str="PONTOS"):
    return f"{prefix}/name_SD401Fredrika/{tag}/{index}"

def create_payload(timestamp: str, value: Any) -> Dict:
    return {
        "timestamp": timestamp,
        "value": value
    }

## Handlers

def handler_127245(data: Dict) -> List[Tuple[str, Dict]]:
    """Rudder message"""
    output = []

    if value := data["fields"].get("Position"):
        output.append((create_topic("steering_angle_deg"), value))

    if value := data["fields"].get("Angle Order"):
        output.append((create_topic("steering_order_deg"), value))

    return output


def handler_127250(data: Dict) -> List[Tuple[str, Dict]]:
    """Heading"""
    return [
        (create_topic("positioningsystem_heading_deg"), data["fields"]["Heading"])
    ]

def handler_127251(data: Dict) -> List[Tuple[str, Dict]]:
    """Rate of Turn"""
    return [
        (create_topic("positioningsystem_rot_degpm"), data["fields"]["Rate"])
    ]

def handler_127257(data: Dict) -> List[Tuple[str, Dict]]:
    """Attitude"""
    return [
        (create_topic("positioningsystem_pitch_deg"), data["fields"]["Pitch"]),
        (create_topic("positioningsystem_roll_deg"), data["fields"]["Roll"])
    ]

def handler_129026(data: Dict) -> List[Tuple[str, Dict]]:
    """COG & SOG"""
    if data["fields"]["COG Reference"] == "Magnetic":
        return []
    
    return [
        (create_topic("positioningsystem_cog_deg"), data["fields"]["COG"]),
        (create_topic("positioningsystem_sog_kn"), data["fields"]["SOG"])
    ]

def handler_129029(data: Dict) -> List[Tuple[str, Dict]]:
    """GNSS Position"""
    return [
        (create_topic("positioningsystem_latitude_deg"), data["fields"]["Latitude"]),
        (create_topic("positioningsystem_longitude_deg"), data["fields"]["Longitude"])
    ]

HANDLERS = {
    127245: handler_127245,
    127250: handler_127250,
    127251: handler_127251,
    127257: handler_127257,
    129026: handler_129026,
    129029: handler_129029,
}


## Processing loop

for line in sys.stdin:

    try:
        timestamp, data = line.split()
    except Exception as exc:
        logging.error(f"Line {line} did not look as expected: '<timestamp> <canboat payload>'")
        continue

    try:
        data = json.loads(data)
    except json.JSONDecodeError:
        continue

    if handler := HANDLERS.get(data["pgn"]):
        for topic, value in handler(data):
            payload = create_payload(timestamp, value)
            sys.stdout.write(f"{topic} {payload}")

        sys.stdout.flush()
