version: '3'
services:

  source_1:
    image: ghcr.io/mo-rise/porla:v0.2.1
    network_mode: host
    restart: always
    command:
      [
        "socat UDP4-RECV:${YD_PORT_1},reuseaddr STDOUT | timestamp --epoch | to_bus 1"
      ]

  source_2:
    image: ghcr.io/mo-rise/porla:v0.2.1
    network_mode: host
    restart: always
    command:
      [
        "socat UDP4-RECV:${YD_PORT_2:-70000},reuseaddr STDOUT | timestamp --epoch | to_bus 1"
      ]

  record_raw:
    image: ghcr.io/mo-rise/porla:v0.2.1
    network_mode: host
    restart: always
    volumes:
      - ${LOG_LOCATION}:/recordings
    working_dir: /recordings
    command: [ "from_bus 1 | record n2k_raw.log" ]

  to_canboat:
    image: ghcr.io/mo-rise/porla-nmea:v0.2.0
    network_mode: host
    restart: always
    command:
      [
        "from_bus 1 | shuffle '{} {data}' '{data}' | analyzer -json | timestamp --epoch | to_bus 2"
      ]

  record_canboat:
    image: ghcr.io/mo-rise/porla:v0.2.1
    network_mode: host
    restart: always
    volumes:
      - ${LOG_LOCATION}:/recordings
    working_dir: /recordings
    command: [ "from_bus 2 | record n2k_canboat.log" ]

  to_pontos:
    image: ghcr.io/mo-rise/porla-pontos:v0.4.1
    network_mode: host
    restart: always
    command:
      [
        "from_bus 2 | canboat2pontos ${PONTOS_VESSEL_ID} | limit 1 --key '{key} {}' | to_bus 3"
      ]

  record_pontos:
    image: ghcr.io/mo-rise/porla:v0.2.1
    network_mode: host
    restart: always
    volumes:
      - ${LOG_LOCATION}:/recordings
    working_dir: /recordings
    command: [ "from_bus 3 | record n2k_pontos.log" ]

  sink:
    image: ghcr.io/mo-rise/porla-mqtt:v0.2.0
    network_mode: host
    restart: always
    command:
      [
        "from_bus 3 | mqtt --host pontos.ri.se --port 443 --transport websockets --protocol 5 --tls --user ${PONTOS_MQTT_USERNAME} --password ${PONTOS_MQTT_TOKEN} --clientid ${PONTOS_MQTT_CLIENT_ID}_n2k publish --line '{topic} {message}'"
      ]
